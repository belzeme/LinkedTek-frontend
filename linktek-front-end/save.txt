
  /**
   * Request the data required from component.
   * Get user posts list
   * Get user comments list
   * Get user relations list
   */
  componentWillMount() {
    axios.post(`http://127.0.0.1:3010/post/list`, {email: this.props.userEmail})
    .then(ret => {
      console.log(ret)
      this.setState({myPosts: []});
      this.handlePostList(ret);
    })
    .catch(error => console.log(error));

    axios.post(`http://127.0.0.1:3010/comment/user`, {email: this.props.userEmail})
    .then(ret => {
      this.setState({myComments: []});
      this.handleUserCommentsList(ret);
    })
    .catch(error => console.log(error));

    axios.post(`http://127.0.0.1:3010/account/leader/list`, {email: this.props.userEmail})
    .then(ret => {
      this.setState({userRelations: []});
      this.setState({userRelationMails: []});
      this.setState({contact: []});
      this.handleRelationList(ret);
    })
    .catch(error => console.log('error : ' + error));
  }

  /**
   * Internal function used for set the comment list row into react properties
   * @param {object} ret The comment list row
   */
  addItemToCommentList(ret) {
    let tmpComment = this.state.myComments;
    let val = Object.values(ret);
    let tmp = [{
      postTitle: val[0].title,
      postContent: val[0].content,
      postDate: val[0].creation_time,
      postOwner: val[3].name,
      myComment: val[2].content,
      myCommentDate: val[2].creation_time,
      myCommentId: val[2].id
    }];
    tmpComment.push(tmp);
    this.setState({myComment: tmpComment});
  }

  /**
   * Internal function used for set the comment list into react properties
   * @param {object} ret The comment list
   */
  handleUserCommentsList(ret) {
    let i = 0;
    for (let value of Object.values(ret)) {
      if (i === 0) {
        Object.keys(value).map(k => this.addItemToCommentList(value[k]));
      }
      i++;
    }
  }

  /**
   * Internal function used for comment remove
   * Display confirmation popup
   */
  removeComment = () => {
    this.setState({editCommentModalVisible: false});
    this.handleDeleteCommentModalConfirmationShow();
  }

  /**
   * Internal function used for set user realtion into react properties
   * @param {object} value The user relation row
   */
  addItemToUserRelations(value){
    //console.log('name : ' + value.name);
    //console.log('email : ' + value.email);
    let tmp = this.state.userRelations;
    tmp.push(value.name);
    this.setState({userRelations: tmp});
    tmp = this.state.userRelationMails;
    tmp.push(value.email);
    this.setState({userRelationMails: tmp});
  }

  /**
   * Internal function used for set user realtion list into react properties
   * @param {object} ret The user relation list
   */
  handleRelationList(ret) {
    //console.log(ret);
    let i = 0;
    for (let value of Object.values(ret)) {
      if (i === 0) {
        Object.keys(value).map(k => this.addItemToUserRelations(value[k]));
      }
      i++;
    }
    let tmp = this.state.contact;
    let next;
    for (let j = 0; j < this.state.userRelations.length; j++) {
      next = this.state.userRelations[j] + ' : ' + this.state.userRelationMails[j];
      tmp.push(next);
    }
    this.setState({contact: tmp});
  }

  /**
   * Internal function used to save post properties into react properties
   */
  handlePostProperties() {
    let tmp = this.state.updatePost;
    tmp[0].value = this.state.editPostTitle;
    tmp[1].value = this.state.editPostContent;
    this.setState({updatePost: tmp});
  }

  /**
   * Internal function used to save comment properties into react properties
   */
  handleCommentProperties() {
    let tmp = this.state.updateComment;
    tmp[0].value = 'Comment';
    tmp[1].value = this.state.editComment;
    this.setState({updatePost: tmp});
  }

  /**
   * Internal function used for handling the post list
   * @param {object} ret The return of backend gateway object.
   */
  handlePostList(ret) {
    let i = 0;
    for (let value of Object.values(ret)) {
      if (i === 0) {
        Object.keys(value).map(k => this.addPropsToState(value[k]));
      }
      i++;
    }
  }

  /**
   * Internal function used for add user post into react properties
   * @param {object} value The user post row
   */
  addPropsToState(row) {
    let ret = this.state.myPosts;
    let tmp = [
      {id: row.id, creation_time: row.creation_time, title: row.title, content: row.content},
    ];
    ret.push(tmp);
    this.setState({myPosts: ret});
  }

  /**
   * Internal function used for removing post
   * Display success or failure alert
   */
  handleRemovePost() {
    axios.delete(`http://127.0.0.1:3010/post`, {data: {id: this.state.currentMessageId}})
    .then(ret => {
      //console.log(ret);
      this.handleDeletePostModalConfirmationClose();
      alert('Post deleted with success !');
    })
    .catch(error => {
      //console.log(error);
      this.handleDeletePostModalConfirmationClose();
      alert('Error, post not deleted !');
    });
  }

  /**
   * Internal function used for removing comment
   * Display success or failure alert
   */
  handleRemoveComment() {
    axios.delete(`http://127.0.0.1:3010/comment`, {data: {id: this.state.currentCommentId}})
    .then(ret => {
      //console.log(ret);
      this.handleDeleteCommentModalConfirmationClose();
      alert('Comment deleted with success !');
    })
    .catch(error => {
      //console.log(error);
      this.handleDeleteCommentModalConfirmationClose();
      alert('Error, comment not deleted !');
    });
  }

  /**
   * Function used for editing post
   * Display success or failure alert
   */
  handleEditPostValidation = () => {
    this.handlePostProperties();
    axios.patch(`http://127.0.0.1:3010/post`, {id: this.state.currentMessageId, properties: this.state.updatePost})
    .then(ret => {
      this.setState({editPostModalVisible: false});
      alert('Post edited with success !');
    })
    .catch(error => {
      this.setState({editPostModalVisible: false});
      alert('Error, post had not been edited !');
    });
  }

  /**
   * Function used for editing comment
   * Display success or failure alert
   */
  handleEditCommentValidation = () => {
    this.handleCommentProperties();
    axios.patch(`http://127.0.0.1:3010/comment`, {id: this.state.currentCommentId, properties: this.state.updateComment})
   .then(ret => {
      this.setState({editCommentModalVisible: false});
      alert('Comment edited with success !');
    })
    .catch(error => {
      this.setState({editCommentModalVisible: false});
      alert('Comment, post had not been edited !');
    });
  }

  /**
   * Internal Function used for removing post
   * Display confirmation popup
   */
  removePost = () => {
    this.setState({editPostModalVisible: false});
    this.handleDeletePostModalConfirmationShow();
  }

  /**
   * Function used for open the delete post modal confirmation
   */
  handleDeletePostModalConfirmationShow = () => {
    this.setState({isModalDeletePostConfirmationVisible: true});
  }

  /**
   * Function used for close the delete post modal confirmation
   */
  handleDeletePostModalConfirmationClose = () => {
    this.setState({isModalDeletePostConfirmationVisible: false});
  }

  /**
   * Function used for close the delete comment modal confirmation
   */
  handleDeleteCommentModalConfirmationClose = () => {
    this.setState({isModalDeleteCommentConfirmationVisible: false});
  }

  /**
   * Function used for open the delete comment modal confirmation
   */
  handleDeleteCommentModalConfirmationShow = () => {
    this.setState({isModalDeleteCommentConfirmationVisible: true});
  }

  /**
   * Internal function used for set the newPostTitle into react properties
   * @param {event} event The new newPostTitle value
   */
  handleNewPostTitleChanged = name => event => {
    this.setState({ newPostTitle: event.target.value});
  }

  /**
   * Internal function used for set the newPostContent into react properties
   * @param {event} event The new newPostContent value
   */
  handleNewPostContentChanged = name => event => {
    this.setState({ newPostContent: event.target.value});
  }

  /**
   * Internal function used for set the selectedContact into react properties
   * @param {string} value The new selectedContact value
   */
  handleSelectedContactChange = (value) => {
    this.setState({ selectedContact: value});
  }

  /**
   * Internal function used for set the get the post date
   * @param {string} index The post index value
   * @return {string} the required string
   */
  handlePostDate(index) {
    let tmp = Object.values(this.state.myPosts[index]);
    return 'Date : ' + tmp[0].creation_time;
  }

  /**
   * Internal function used for set the get the post title
   * @param {string} index The post index value
   * @return {string} the required string
   */
  handleRowTitle(index) {
    let tmp = Object.values(this.state.myPosts[index]);
    console.log(tmp[0].title);
    return tmp[0].title;
  }

  /**
   * Internal function used for set the get the post content
   * @param {string} index The post index value
   * @return {string} the required string
   */
  handleRowContent(index) {
    let tmp = Object.values(this.state.myPosts[index]);
    return tmp[0].content;
  }

  /**
   * Internal function used for set the get the post owner
   * @param {string} index The post index value
   * @return {string} the required string
   */
  handlePostOwner(index) {
    return this.props.userName;
  }

  /**
   * Internal function used for set the get the post id
   * @param {string} index The post index value
   * @return {string} the required string
   */
  handlePostId(index) {
    let tmp = Object.values(this.state.myPosts[index]);
    return tmp[0].id;
  }

  /**
   * Function used to load and display the selected post details
   */
  loadActualityDetails = () => {
    ReactDOM.render(<ActualityDetails
      userEmail={this.props.userEmail}
      postId={this.state.postId}
      postTitle={this.state.postTitle}
      postContent={this.state.postContent}
      postDate={this.state.postDate}
      postOwner={this.props.userName}
      />, document.getElementById('root'));
      this.handleEditPostModalClose();
  }

  /**
   * Function used to edit a post details
   * @param {string} index The post index value
   * Display the edit post popup
   */
  handleEditPostModalShow = (index) => {
    let tmp = Object.values(this.state.myPosts[index]);
    this.setState({ editPostContent: tmp[0].content});
    this.setState({ editPostTitle: tmp[0].title});
    this.setState({ currentMessageId: tmp[0].id});
    this.setState({ postId: this.handlePostId(index)});
    this.setState({ postContent: this.handleRowContent(index)});
    this.setState({ postTitle: this.handleRowTitle(index)});
    this.setState({ postDate: this.handlePostDate(index)});
    this.setState({ postOwner: this.handlePostOwner(index)});
    this.setState({ editPostModalVisible: true});
  }

  /**
   * Function used to close the edit post details popup
   */
  handleEditPostModalClose = () => {
    this.setState({ postId: 0});
    this.setState({ postContent: ''});
    this.setState({ postTitle: ''});
    this.setState({ postDate: ''});
    this.setState({ postOwner: ''});
    this.setState({ editPostContent: ''});
    this.setState({ editPostTitle: ''});
    this.setState({currentMessageId: ''});
    this.setState({ editPostModalVisible: false});
  }

  /**
   * Function used to edit a comment details
   * @param {string} index The post index value
   * Display the edit comment popup
   */
  handleEditCommentModalShow = (index) => {
    let tmp = Object.values(this.state.myComments[index]);
    this.setState({ editComment: tmp[0].myComment});
    this.setState({ currentCommentId: tmp[0].myCommentId});
    this.setState({ editCommentModalVisible: true});
  }

  /**
   * Function used to close the edit comment details popup
   */
  handleEditCommentModalClose = () => {
    this.setState({ editComment: ''});
    this.setState({ currentCommentId: 0});
    this.setState({ editCommentModalVisible: false});
  }

  /**
   * Function used to close the edit comment details popup
   */
  handleEditCommentModalValidation = () => {
    this.handleCommentProperties();
    this.setState({ editComment: ''});
    this.setState({ currentCommentId: 0});
    this.setState({ editCommentModalVisible: false});
  }

  /**
   * Internal function used for set the editPostContent into react properties
   * @param {event} event The new editPostContent value
   */
  handleEditPostContent = name => event => {
    this.setState({ editPostContent: event.target.value});
  }

  /**
   * Internal function used for set the editPostTitle into react properties
   * @param {event} event The new editPostTitle value
   */
  handleEditPostTitle = name => event => {
    this.setState({ editPostTitle: event.target.value});
  }

  /**
   * Internal function used for set the editComment into react properties
   * @param {event} event The new editComment value
   */
  handleEditComment = name => event => {
    this.setState({ editComment: event.target.value});
  }

  /**
   * Function used to validate a new post
   * Display success or failure alert
   */
  handleNewPost = () => {
    axios.post(`http://127.0.0.1:3010/post`, {email: this.props.userEmail, title: this.state.newPostTitle, content: this.state.newPostContent})
    .then(ret => {
      alert('Post success !');
    })
    .catch(ret => {
      alert('Post failed !');
    });
  }
